package travelmaster.service;

import java.time.LocalDateTime;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import travelmaster.client.BookingClient;
import travelmaster.client.HotelClient;
import travelmaster.dto.Booking;
import travelmaster.dto.UserDTO;
import travelmaster.exception.ResourceNotFoundException;
import travelmaster.model.User;
import travelmaster.repository.UserRepository;
import org.modelmapper.ModelMapper;
@Service
public class UserService {
    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private UserRepository userRepository;

    public UserDTO createUserDTO(User user) {
        // Save the User entity to the repository
        User savedUser = userRepository.save(user);
        
        // Convert saved User entity back to UserDTO
        UserDTO savedUserDto = modelMapper.map(savedUser, UserDTO.class);
        
        return savedUserDto; // Return the saved UserDTO
    }

    public User getUserById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + id));
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User updateUser(Long id, User userDetails) {
        return userRepository.findById(id)
                .map(user -> {
                    user.setUsername(userDetails.getUsername());
                    user.setPassword(userDetails.getPassword());
                    user.setEmail(userDetails.getEmail());
                    user.setFirstName(userDetails.getFirstName());
                    user.setLastName(userDetails.getLastName());
                    user.setRole(userDetails.getRole());
                    user.setUpdatedAt(LocalDateTime.now());
                    return userRepository.save(user);
                })
                .orElseThrow(() -> new ResourceNotFoundException("User not found with ID: " + id));
    }

    public boolean deleteUser(Long id) {
        if (!userRepository.existsById(id)) {
            throw new ResourceNotFoundException("User not found with ID: " + id);
        }
        userRepository.deleteById(id);
        return true;
    }
}
