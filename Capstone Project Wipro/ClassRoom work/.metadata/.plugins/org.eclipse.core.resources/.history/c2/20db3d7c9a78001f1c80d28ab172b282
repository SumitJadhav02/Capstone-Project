package travelmaster.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import travelmaster.model.Booking;
import travelmaster.service.BookingService;

@RestController
@RequestMapping("/api/bookings")
public class BookingController {
   
  @Autowired
  private BookingService bookingService;
  
  @GetMapping
  public ResponseEntity<List<Booking>> getAllBooking()
  {
	  List<Booking> bookings = bookingService.getAllBooking();
	  return ResponseEntity.ok(bookings);
  }
  
  
  @GetMapping("/{id}")
  public ResponseEntity<Booking> getBookingById(@PathVariable Long id)
  {
	  Optional<Booking> booking = bookingService.getBookingById(id);
      return booking.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
  }
  
  @PostMapping
  public ResponseEntity<Booking> createBooking(@RequestBody Booking booking) {
      Booking createdBooking = bookingService.createBooking(booking);
      return ResponseEntity.ok(createdBooking);
  }
  
  // Update a booking
  @PutMapping("/{id}")
  public ResponseEntity<Booking> updateBooking(@PathVariable Long id, @RequestBody Booking bookingDetails) {
      Optional<Booking> updatedBooking = bookingService.updateBooking(id, bookingDetails);
      return updatedBooking.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
  }

  // Delete a booking
  @DeleteMapping("/{id}")
  public ResponseEntity<Void> deleteBooking(@PathVariable Long id) {
      boolean isDeleted = bookingService.deleteBooking(id);
      if (isDeleted) {
          return ResponseEntity.noContent().build();
      } else {
          return ResponseEntity.notFound().build();
      }
  }
}
